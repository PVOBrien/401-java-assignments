/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bitmap.transformer;

import javax.imageio.ImageIO;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;

public class App {

    public static void main(String[] args) {
        // args[0] will equal file path
        // args[1] will equal output path for new image
        // args[2] will manipulate image

        System.out.println("this is the args: " + args[0]);

        String takeTheDamnPath = args[0];

//        String hardCodedPath = "C:\\Users\\PVOVi\\codefellows\\401\\bitmap-transformer\\src\\main\\resources\\mario.bmp";
//        hardCodedPath.equals(takeTheDamnPath);
//        BufferedImage thePic = getImg(takeTheDamnPath);

        BufferedImage thePic = getImg(takeTheDamnPath);
//        BufferedImage thePic = getImg("C:\\Users\\PVOVi\\codefellows\\401\\bitmap-transformer\\src\\main\\resources\\mario.bmp");
//        BufferedImage thePic = getImg("C:\\mario.bmp");

        giveImg(invertedPixel(thePic),2);
//        giveImg(ninetyDegreesTurned(thePic), 1); // , args[1]
//        giveImg(pixelPlay(thePic), 0);

//        BufferedImage thePic = getImg("C:\\Users\\PVOVi\\codefellows\\401\\bitmap-transformer\\src\\main\\resources\\mario.bmp");

        giveImg(invertedPixel(thePic),2);
        giveImg(ninetyDegreesTurned(thePic), 1); // , args[1]
        giveImg(pixelPlay(thePic), 0);
    }

    public static BufferedImage getImg(String file) {
        BufferedImage img = null;
        try {
            System.out.println("File in try: " + file);
            img = ImageIO.read(new File(file));
        } catch (IOException e) {
            System.out.println("File in catch: " + file);
            System.out.println("Unable to find the image.");
        }

        System.out.println("This is your img: " + img);
//        System.out.println("This is the img.height " + img.getHeight());

        return img;
    }

    public static void giveImg(BufferedImage potato, int counter) { // , String argsPath
//        int counter++;
        String pathStringLiteral = String.format("C:\\Users\\PVOVi\\codefellows\\401\\bitmap-transformer\\src\\main\\resources\\outputImgs%d.bmp", counter);

        try {
            RenderedImage finalImg = potato;

            System.out.println("This is from our output method " +
              "giveImg: " +potato);
//            File path = new File("C:\\Users\\PVOVi" +
//              "\\codefellows\\401\\bitmap-transformer\\src\\main" +
//              "\\resources\\outputImgs.bmp");

            File path = new File(pathStringLiteral);

//            File path = new File(argsPath);
            ImageIO.write(finalImg, "bmp", path );
        } catch (IOException e) {
            System.out.println("We had a problem saving image");
        }
    }

    public static BufferedImage ninetyDegreesTurned (BufferedImage butcheredImg) {
        // https://blog.idrsolutions.com/2019/05/image-rotation-in-java/ to know
        // how to rotate a photo.
        double rads = Math.toRadians(90);
        double sin = Math.abs(Math.sin(rads));
        double cos = Math.abs(Math.cos(rads));
        int w = (int) Math.floor(butcheredImg.getWidth() * cos + butcheredImg.getHeight() * sin);
        int h = (int) Math.floor(butcheredImg.getHeight() * cos + butcheredImg.getWidth() * sin);
        BufferedImage rotatedImage = new BufferedImage(w, h, butcheredImg.getType());
        AffineTransform at = new AffineTransform();
        at.translate(w / 2, h / 2);
        at.rotate(rads, 0, 0);
        at.translate(-rotatedImage.getWidth() / 2, -rotatedImage.getHeight() / 2);
        AffineTransformOp rotateOp = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
        rotateOp.filter(butcheredImg, rotatedImage);

        return rotatedImage;
    }

    public static BufferedImage pixelPlay (BufferedImage butcheredImg) {
        int width = butcheredImg.getWidth();
        int height = butcheredImg.getHeight();

//        int pixel = butcheredImg.getRGB(0, 0);

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                butcheredImg.setRGB(i, j, -1);
            }
        }

        return butcheredImg;
    }

    public static BufferedImage invertedPixel (BufferedImage butcheredImg) {

        // https://www.geeksforgeeks.org/image-processing-java-set-4-colored-image-negative-image-conversion/?ref=rp

        int width = butcheredImg.getWidth();
        int height = butcheredImg.getHeight();


        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = butcheredImg.getRGB(i, j);

                int red = (pixel>>16)&0xff;
                int green = (pixel>>8)&0xff;
                int blue = pixel&0xff;

                red = 255 - red;
                green = 255 - green;
                blue = 255 - blue;

                pixel = (red<<16) | (green<<8) | blue;

                butcheredImg.setRGB(i, j, pixel);

            }
        }
        return butcheredImg;
    }
}
